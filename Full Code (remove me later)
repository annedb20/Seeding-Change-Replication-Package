# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Authors: Elinor Benami and Anne Bell
# Date created: # Sat Feb 17 21:48:14 2024
# Date last updated: Mon Jul 9
# Description: Evaluate spend of USDA conservation programs
# Source for PCSC data: https://publicdashboards.dl.usda.gov/t/FPAC_PUB/views/PartnershipsForClimate-SmartCommodities/DataDownload?%3Aembed=y&%3AisGuestRedirectFromVizportal=y
# Source for NRCS data: https://www.farmers.gov/data/financial-assistance-download
  # Contract Status data downloaded from first dataset on Download tab of the above website; with Contract Status and Historically Underserved toggled to "All" 
# Source for IRA vs Farm Bill Funding Outlays: https://www.cbo.gov/system/files/2024-02/51317-2024-02-usda.pdf
# Sources for USDA Program Funding:https://publicdashboards.dl.usda.gov/t/FPAC_PUB/views/RCAConservationProgramObligations1/ConservationProgramObligations?%3Adisplay_count=n&%3Aembed=y&%3AisGuestRedirectFromVizportal=y&%3Aorigin=viz_share_link&%3AshowAppBanner=false&%3AshowVizHome=n (for non-CRP data);
# https://www.fsa.usda.gov/Assets/USDA-FSA-Public/usdafiles/Conservation/Excel/CRPHistoryState86-22.xlsx (for CRP data)
# Source for NASS regional groupings: https://www.nass.usda.gov/Statistics_by_State/RFO/index.php;
# Source for USDA IRA Data Visualization Tool regional groupings: https://publicdashboards.dl.usda.gov/t/FPAC_PUB/views/InflationReductionActDataVisualizationTool/IRAEndofYearReport?%3Aembed=y&%3AisGuestRedirectFromVizportal=y
# Source for NASS data: https://quickstats.nass.usda.gov/results/22649D58-38F7-3929-8C15-FE100B451C33
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Load the Libraries
library(tidyverse)
library(janitor)
library(readxl)
library(viridis)
library(kableExtra)

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Figures ----
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

## Figure 1: IRA vs Farm Bill Funding ----
# Data extracted from source and made into a csv file with four columns: Program,
# Year, Funding_Millions, and Outlays_Millions

# Load in data
program_funding <- read.csv("/Users/annedb20/Downloads/Program Funding.csv")

program_funding <- program_funding %>%
  mutate(Funding_Billions = Funding_Millions/1000, # Adjust numbers to billions
         Outlays_Billions = Outlays_Millions/1000) %>%
  select(- Funding_Millions, - Outlays_Millions) %>% # Remove unused columns
  mutate(Program = factor(Program, levels = c("RCPP IRA", # Set order for programs
                                              "CSP IRA",
                                              "EQIP IRA",
                                              "RCPP Farm Bill",
                                              "CSP Farm Bill",
                                              "EQIP Farm Bill")))

# Create stacked lines plot
program_funding_plot <- ggplot(data = program_funding, 
                               aes(x = Year, 
                                   y = Outlays_Billions, 
                                   fill = Program)) +
  geom_area() + # Stack programs
  labs(y = "Dollars in Billions",
       x = "Fiscal Year") +
  # Set gradient colors for both categories
  scale_fill_manual(values = c("RCPP IRA" = "#e5f5f9", 
                               "CSP IRA" = "#99d8c9",
                               "EQIP IRA" = "#2ca25f",
                               "RCPP Farm Bill" = "#efedf5",
                               "CSP Farm Bill" = "#bcbddc",
                               "EQIP Farm Bill" = "#756bb1")) +
  # Add text labelling IRA and Farm Bill categories
  annotate("text", x = 2029, y = 1, label = "Farm Bill Funding", hjust = 0.5,
           vjust = 1, color = "white", size = 7, angle = 0) +
  annotate("text", x = 2029, y = 4, label = "IRA Funding", hjust = 0.5, 
           vjust = 1, color = "white", size = 7, angle = 0) +
  # Year labels starting from 2023 and every two years thereafter
  scale_x_continuous(breaks = seq(min(program_funding$Year), 
                                  max(program_funding$Year), by = 1),
                     labels = function(x) ifelse((x - 2023) %% 2 == 0, x, "")) + 
  theme_light(base_size = 20) + # Size up fonts
  theme(legend.position = "bottom") + # Move legend to bottom
  guides(fill = guide_legend(ncol = 2)) # Adjust legend column number to 2

program_funding_plot


## Figure 2: Funding Levels for USDA Conservation Programs by Year ----

# Load paths and libraries                                                                                                                                                                                                      
# source("0_helper_routines.R") -> Must specify input

# Load historical funding data and clean the dataset
# (Data extracted from sources and uploaded into Excel file)
all_conservation_programs <- 
  readxl::read_xlsx("/Users/annedb20/Downloads/Copy of Figures and related data (3 6 24)_v2.xlsx", sheet = 1, skip = 1, n_max=7) %>% 
  clean_names() %>% 
  pivot_longer(cols = -x1, names_to = "year", values_to = "billions") %>% 
  rename(program_name = x1) %>% 
  mutate(year = as.numeric(str_remove(year, "x")),
         program_name = if_else(str_detect(program_name, "Easment"),
                                "Agricultural Conservation Easement Program (ACEP)",
                                program_name),
         # Reorder the factor levels in the desired order
         program_name = fct_relevel(program_name, "Partnerships for Climate-Smart Commodities (PCSC)", after = 0)) %>% 
  filter(!str_detect(program_name, "ACEP|Rental")) 

# Find the maximum value in the billions column
max_billions <- all_conservation_programs %>%
  group_by(year) %>%
  summarize(yearly_total = sum(billions, na.rm = TRUE)) %>%
  summarize(max_yearly_total = max(yearly_total, na.rm = TRUE)) %>%
  pull(max_yearly_total)

# Create function to clean a chart
clean_chart_clutter_explore <- 
  theme(panel.background = element_blank(),      # Remove panel background
    axis.line = element_line(colour = "grey"),       # Add axis line
    axis.title.y = element_text(angle = 0, vjust = 0.5),      # Rotate y axis so don't have to crank head
    legend.position = "bottom") 

# Create a stacked bar chart showing funding levels in every year for each program. 
plot_funds <- all_conservation_programs %>%
  ggplot(aes(year, billions, fill = program_name)) +
  geom_col(position = "stack") +
  # Add tick marks for every year
  scale_x_continuous(breaks = seq(min(all_conservation_programs$year),
                                  max(all_conservation_programs$year), by = 1),
                     # Start at origin for x and y axis
                     expand = c(0, 0)) +
  # Add tick marks for every numeric value on the y axis
  scale_y_continuous(breaks = seq(min(all_conservation_programs$billions, na.rm = TRUE),
                                  max_billions, by = 1)) +
  labs(title = "Funding Levels for Select Major USDA Conservation Programs by Year",
       x = "",
       y = "Funding\n(Billions)",
       fill = "Program Name", 
       caption = "Source: RCA Data Viewer, USDA NRCS") +
  clean_chart_clutter_explore +
  # Rotate x label 90 degrees
  theme(axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
        axis.text.y = element_text(size = 12, hjust = 1),
        legend.position = "bottom") +
  # Add dashed line for historical obligations
  geom_segment(aes(x = 2005, xend = 2023, y = max_billions * 1.05, yend = max_billions * 1.05), linetype = "dashed") +
  ggplot2::annotate("text", x = (2005 + 2023) / 2, y = max_billions,
                    label = "Historical Obligations", size = 4, hjust = 0.5) +
  # Add dashed line for projected outlays
  geom_segment(aes(x = 2024, xend = 2033, y = max_billions * 1.05, yend = max_billions * 1.05), linetype = "dashed",
               color = "dimgray") +
  ggplot2::annotate("text", x = ((2024 + 2033) / 2), y = max_billions * 1.04,
                    label = "\n Projected Outlays", size = 4, hjust = 0.5, color = "dimgray") +
  # Adjust the legend to have more rows
  scale_fill_discrete(guide = guide_legend(nrow = 3)) 

plot_funds

## Figure 3: Top 5 Practice Types by Region ----

# Set file paths
pathdata <- ifelse(Sys.info()[["user"]] == "elinor",
                   "/Users/elinor/Dropbox/research/csa_stats/data/financial-assistance-data",
                   ## TODO: Auth: please enter your relevant filepath (or alt suggestions) in the below line
                   "/Users/annedb20/financial-assistance-data 2/")
pathfile <- ifelse(Sys.info()[["user"]] == "elinor",
                   "/Users/elinor/Dropbox/research/csa_stats/",
                   ## TODO: Auth: please enter your relevant filepath (or alt suggestions) here
                   "/Users/annedb20/csa")

datapath <- function(x){paste0(pathdata, x)}
filepath <- function(x){paste0(pathfile, x)}

# Define the path to the folder containing the CSV files
folder_path <- pathdata 

# List all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = ".*Download.*\\.csv$", full.names = TRUE)
short_csv <- list.files(path = folder_path, pattern = ".*Download.*\\.csv$")
short_names <-tools::file_path_sans_ext(short_csv); short_names

# Function to extract the short name of the file (without path and extension)
get_short_name <- function(file_path) {basename(file_path) %>% tools::file_path_sans_ext() }

# Use lapply to load each CSV file and assign it to the environment
lapply(csv_files, function(file) {
  data <- read_csv(file) %>% clean_names()
  assign(x = get_short_name(file), data, envir = .GlobalEnv)})

# Filter for programs of interest and state- and practice-specific information
# (Annual Payments removed from consideration since they are not practice-specific)
state_practices_all_12_regions <- Practice_Political_Download %>%
  filter(suppressed != "TRUE", geography_level != "National", 
         county_name == "Total", obligation_fy == "Total",
         certification_fy == "Total", practice_code != "Total", 
         practice_name != "Total", program != "AWEP", program!= "WHIP",
         program != "AMA", practice_code != "CROP", practice_code != "RANGE",
         practice_code != "PAST", practice_code != "MINPAY",
         practice_code != "E300EAP1",
         practice_code != "E300EAP2",
         practice_code != "NIPF", practice_code != "PCROP") %>%
  select(-geography_level, -county_name, -fips_code) %>%  
  # Make new region variable, derived from https://www.nass.usda.gov/Statistics_by_State/RFO/index.php
  mutate(region = case_when(state %in% c("Pennsylvania", "Delaware", "Maryland", 
                                         "New Jersey", "New York", "Maine", "Vermont", 
                                         "New Hampshire", "Rhode Island", 
                                         "Massachusetts", "Connecticut") ~ 
                              "Northeastern Region",
                            state %in% c("Kentucky", "North Carolina", 
                                         "Tennessee", "Virginia", 
                                         "West Virginia") ~ 
                              "Eastern Mountain Region",
                            state %in% c("Georgia", "Alabama", "Florida", 
                                         "South Carolina") ~ 
                              "Southern Region",
                            state %in% c ("Michigan", "Indiana", "Ohio") ~ 
                              "Great Lakes Region",
                            state %in% c("Iowa", "Minnesota", "Wisconsin") ~
                              "Upper Midwest Region", 
                            state %in% c("Missouri", "Illinois") ~ 
                              "Heartland Region",
                            state %in% c("Arkansas", "Louisiana", "Mississippi") ~ 
                              "Delta Region",
                            state %in% c("Nebraska", "Kansas", "North Dakota", 
                                         "South Dakota") ~ 
                              "Northern Plains Region",
                            state %in% c("Texas", "Oklahoma") ~ 
                              "Southern Plains Region",
                            state %in% c("Colorado", "Arizona", "Montana",
                                         "New Mexico", "Utah", "Wyoming") ~
                              "Mountain Region",
                            state %in% c("Washington", "Alaska", "Idaho", 
                                         "Oregon") ~
                              "Northwest Region",
                            state %in% c("California", "Hawaii", "Nevada") ~ 
                              "Pacific Region",
                            state %in% c("Guam", "Puerto Rico", "American Samoa",
                                         "Northern Mariana Islands", 
                                         "U.S. Virgin Islands") ~ 
                              "Island Territories"))

# Find sum of dollars_obligated for each region and practice
top_practice_codes_12_regions <- 
  state_practices_all_12_regions %>%
  group_by(region, practice_code) %>%
  summarize(practice_name = practice_name,
            practice_dollars_obligated = sum(dollars_obligated)) %>%
  ungroup()

# Filter out duplicate rows for ranking
top_practice_codes_12_regions <- distinct(top_practice_codes_12_regions)

# Take top 5 practices in each region
top_practice_codes_12_regions <- top_practice_codes_12_regions %>%
  group_by(region) %>%
  top_n(5, practice_dollars_obligated) %>%
  mutate(ranking = rank(-practice_dollars_obligated)) %>%
  ungroup()

# Add practice categories and abbreviations for better graph legibility
top_practice_codes_12_regions <- top_practice_codes_12_regions %>%
  # Authors sorted practices into categories based off of practice descriptions 
  mutate(practice_type = case_when(practice_name %in% c("Clearing and Snagging",
                                                        "Grade Stabilization Structure",
                                                        "Stream Habitat Improvement and Management",
                                                        "Streambank and Shoreline Protection") ~
                                     "Surface Water Improvement",
                                   practice_name %in% c("Animal Mortality Facility", 
                                                        "Composting Facility", 
                                                        "Waste Storage Facility",
                                                        "Waste Transfer") ~ 
                                     "Waste Disposal",
                                   practice_name %in% c("Early Successional Habitat Development-Mgt", 
                                                        "Brush Management", 
                                                        "Herbaceous Weed Treatment",
                                                        "Conservation Crop Rotation", 
                                                        "Cover Crop",
                                                        "Planting for high carbon sequestration rate", 
                                                        "Pasture and Hay Planting", 
                                                        "Range Planting",
                                                        "Restoration of Rare or Declining Natural Communities") ~
                                     "Vegetation Management to Enhance Soil and Habitat",
                                   practice_name %in% c("Cropland Annual Payment", 
                                                        "Non-Industrial Private Forest Land Annual Payment",
                                                        "Pasture Annual Payment",
                                                        "Pastured Cropland Annual Payment",
                                                        "Rangeland Annual Payment") ~ 
                                     "Annual Payments",
                                   practice_name %in% c("Energy Efficient Agricultural Operation", 
                                                        "Energy Efficient Building Envelope") ~ 
                                     "Energy Efficient Activity",
                                   practice_name %in% c("Existing Activity Payment-Land Use",
                                                        "Existing Activity Payment-Resource Concern") ~ 
                                     "Existing Activity Payment",
                                   practice_name %in% c("Fence", 
                                                        "Trails and Walkways", 
                                                        "Roofs and Covers", 
                                                        "High Tunnel System",
                                                        "Terrace") ~ 
                                     "Functional Infrastructure",
                                   practice_name %in% c("Heavy Use Area Protection", 
                                                        "Mulching") ~ 
                                     "Ground Cover (excluding crops)",
                                   practice_name %in% c("Incorporating wildlife refuge areas in contingency plans for wildlife.",
                                                        "Prescribed Grazing") ~ 
                                     "Grazing Plans",
                                   practice_name %in% c("Irrigation Land Leveling", 
                                                        "Irrigation Pipeline",
                                                        "Irrigation Reservoir",
                                                        "Irrigation System, Microirrigation",
                                                        "Sprinkler System") ~ 
                                     "Irrigation",
                                   practice_name %in% c("Livestock Pipeline", 
                                                        "Watering Facility") ~ 
                                     "Watering Livestock",
                                   practice_name %in% c("Pumping Plant", 
                                                        "Water Well", 
                                                        "Structure for Water Control", 
                                                        "Underground Outlet") ~ 
                                     "Water Access",
                                   practice_name %in% c("Reduce risk of pesticides in surface water by utilizing precision pesticide application techniques",
                                                        "Reduce risks of nutrient losses to surface water by utilizing precision ag technologies",
                                                        "Nutrient Management") ~ 
                                     "Nutrient Control",
                                   practice_name %in% c("Tree/Shrub Establishment", 
                                                        "Tree/Shrub Site Preparation",
                                                        "Forest Stand Improvement",
                                                        "Woody Residue Treatment") ~ 
                                     "Tree and Forestry Management",
                                   practice_name == "Bivalve Aquaculture Gear and Biofouling Control" ~ 
                                     "Aquaculture",
                                   practice_name == "Combustion System Improvement" ~ 
                                     "Combustion System Improvement",
                                   practice_name == "Residue and Tillage Management, Reduced Till" ~ 
                                     "Reduced Till",
                                   practice_name == "Obstruction Removal" ~ 
                                     "Obstruction Removal"),
         abbreviations = case_when(practice_name == "Clearing and Snagging" ~ "Clear & Snag",
                                   practice_name == "Grade Stabilization Structure" ~ "Grade Stablization",
                                   practice_name == "Stream Habitat Improvement and Management" ~ "Stream Habitat",
                                   practice_name == "Streambank and Shoreline Protection" ~ "Bank Protection",
                                   practice_name == "Animal Mortality Facility" ~ "Animal Mortality",
                                   practice_name == "Composting Facility" ~ "Compost",
                                   practice_name == "Waste Storage Facility" ~ "Waste Storage",
                                   practice_name == "Waste Transfer" ~ "Waste Transfer",
                                   practice_name == "Conservation Crop Rotation" ~ "Crop Rotate",
                                   practice_name == "Cover Crop" ~ "Cover Crop",
                                   practice_name == "Planting for high carbon sequestration rate" ~ "Planting-C Storage",
                                   practice_name == "Pasture and Hay Planting" ~ "Planting-Pasture/Hay",
                                   practice_name == "Range Planting" ~ "Planting-Range",
                                   practice_name == "Restoration of Rare or Declining Natural Communities" ~ "Habitat Restore",
                                   practice_name == "Early Successional Habitat Development-Mgt" ~ "Temp Habitat Mgt",
                                   practice_name == "Brush Management" ~ "Brush Mgt",
                                   practice_name == "Herbaceous Weed Treatment" ~ "Weed Trtmt",
                                   practice_name == "Cropland Annual Payment" ~ "Crop AP",
                                   practice_name == "Non-Industrial Private Forest Land Annual Payment" ~ "Forest AP",
                                   practice_name == "Pasture Annual Payment" ~ "Pasture AP",
                                   practice_name == "Pastured Cropland Annual Payment" ~ "Pasture-Crop AP",
                                   practice_name == "Rangeland Annual Payment" ~ "Range AP",
                                   practice_name == "Energy Efficient Agricultural Operation" ~ "EE Ag Op",
                                   practice_name == "Energy Efficient Building Envelope" ~ "EE Bldg Envelope",
                                   practice_name == "Existing Activity Payment-Land Use" ~ "EAP-Land Use",
                                   practice_name == "Existing Activity Payment-Resource Concern" ~ "EAP-Resource",
                                   practice_name == "Fence" ~ "Fence",
                                   practice_name == "Trails and Walkways" ~ "Trls & Wlkways",
                                   practice_name == "Roofs and Covers" ~ "Roofs & Covers",
                                   practice_name == "High Tunnel System" ~ "High Tunnel",
                                   practice_name == "Terrace" ~ "Terrace",
                                   practice_name == "Heavy Use Area Protection" ~ "Hvy Use Area Protn",
                                   practice_name == "Mulching" ~ "Mulching",
                                   practice_name == "Incorporating wildlife refuge areas in contingency plans for wildlife." ~ "Wildlife Refuge",
                                   practice_name == "Prescribed Grazing" ~ "Prescr. Grazing",
                                   practice_name == "Irrigation Land Leveling" ~ "Irgn Land Level",
                                   practice_name == "Irrigation Pipeline" ~ "Irgn Pipeline",
                                   practice_name == "Irrigation Reservoir" ~ "Irgn Reservoir",
                                   practice_name == "Irrigation System, Microirrigation" ~ "Micro-irgn",
                                   practice_name == "Sprinkler System" ~ "Sprinkler",
                                   practice_name == "Livestock Pipeline" ~ "Livestock Pipe", 
                                   practice_name == "Watering Facility" ~ "Wtr Facility",
                                   practice_name == "Pumping Plant" ~ "Pump Plant",
                                   practice_name == "Water Well" ~ "Well",
                                   practice_name == "Structure for Water Control" ~ "Wtr Ctrl Struct",
                                   practice_name == "Underground Outlet" ~ "Undergrd Outlet",
                                   practice_name == "Reduce risk of pesticides in surface water by utilizing precision pesticide application techniques" ~ "Precise Pesticide Appln",
                                   practice_name == "Reduce risks of nutrient losses to surface water by utilizing precision ag technologies" ~ "Precise Ag Tech",
                                   practice_name == "Nutrient Management" ~ "Nutrient Mgt",
                                   practice_name == "Tree/Shrub Establishment" ~ "Tree/Shrub Estmt",
                                   practice_name == "Tree/Shrub Site Preparation" ~ "Tree/Shrub Prep",
                                   practice_name == "Forest Stand Improvement" ~ "Forest Improvemt",
                                   practice_name == "Woody Residue Treatment" ~ "Woody Residue Trtmt",
                                   practice_name == "Bivalve Aquaculture Gear and Biofouling Control" ~ "Aquaculture Ctrl",
                                   practice_name == "Combustion System Improvement" ~ "Combustn Sys",
                                   practice_name == "Residue and Tillage Management, Reduced Till" ~ "Reduced Till",
                                   practice_name == "Obstruction Removal" ~ "Obstructn Removal"))

# Establish region as a factor with West to East order (appears East to West on plot)
top_practice_codes_12_regions <- top_practice_codes_12_regions %>%
  mutate(region = factor(region, levels = c("Island Territories", "Pacific Region",
                                            "Northwest Region", "Mountain Region",
                                            "Southern Plains Region",
                                            "Northern Plains Region",
                                            "Delta Region", "Heartland Region",
                                            "Upper Midwest Region", 
                                            "Great Lakes Region", "Southern Region",
                                            "Eastern Mountain Region",
                                            "Northeastern Region")))

# Create heat map
top_5_practice_codes_by_region_plot <- 
  ggplot(top_practice_codes_12_regions, aes(x = ranking, y = region, fill = practice_type)) + 
  geom_tile() + 
  geom_text(aes(label = abbreviations), color = "white", size = 5) + #Give abbreviated labels
  scale_fill_viridis_d() + #Set color scale
  theme(legend.position = "bottom", plot.title = element_text(size = 20),
        axis.text = element_text(size = 14), legend.title = element_text(size = 15),
        legend.text = element_text(size = 10), axis.title.x = element_text(size = 15)) +
  labs(title = "Heatmap of Top 5 Practice Types by Region", 
       x = "Practice Ranking", y = "", fill = "Practice Type") 
# Could subtract columns from legend so more of legend would fit on graph

top_5_practice_codes_by_region_plot

## Figure 4: Top 15 PCSC Practices ----

# Load in the data
Partnerships_for_CS_Commodities_data <- read_excel("/Users/annedb20/Downloads/Partnership_for_Climate-Smart_Commodities_Projects.xlsx", "Full Data")

# Calculate total number of projects (labeled "Applicant" in the data)
total_applicants <- n_distinct(Partnerships_for_CS_Commodities_data$Applicant)

# Clean white space and capitalizations
Partnerships_for_CS_Commodities_data$`Available Practices` <- 
  str_replace_all(Partnerships_for_CS_Commodities_data$`Available Practices`, "(^|,|,)\\s*", "\\1")
Partnerships_for_CS_Commodities_data$`Available Practices` <-
  str_to_title(Partnerships_for_CS_Commodities_data$`Available Practices`)

# Split Available_Practices into separate columns for each practice
Partnerships_for_CS_Commodities_data_split <- Partnerships_for_CS_Commodities_data %>%
  rename(Available_Practices = 'Available Practices') %>% # Rename for easier manipulation
  separate_rows(Available_Practices, sep = ",") %>% # Create different rows
  pivot_wider(names_from = Available_Practices, values_from = Available_Practices, # Change into columns
              values_fn = length, values_fill = list(Available_Practices = 0))

# Add up instances of eligibility for each practice
practice_counts <- Partnerships_for_CS_Commodities_data_split %>%
  summarize(across(.cols = -Applicant, ~sum(. == 1, na.rm = TRUE))) %>%
  # Remove non-practice columns
  select(-`Project Summary`, 
         -`Short Agreement Description`, 
         -`MMRV Highlights`, -`Marketing Highlights`, - `Equity Highlights`, 
         -`Federal Funding`, -`Non-Federal Match`, 
         -`Major Commodities Under Agreement`, 
         -`States Covered Under Agreement`) %>%
  # Manually combine duplicates with different wording or which resist cleaning
  # Might be a better way to do some of these, but str_trim made it worse instead of better somehow
  mutate(`340 Cover Crop` = `340 Cover Crop` + `340 Cover Crop `,
         `390 Riparian Herbaceous Cover` = `390 Riparian Herbaceous Cover` + 
           `390 Riparian Herbaceous Cover `,
         `E590a Improving Nutrient Uptake Efficiency And Reducing Risk Of Nutrient Losses` = 
           `E590a Improving Nutrient Uptake Efficiency And Reducing Risk Of Nutrient Losses` + 
           `E590a Improving Fertilizer Uptake Efficiency And Reducing Risk Of Fertilizer Losses`,
         `590 Nutrient Management` = `590 Nutrient Management` + `590 Nutrient Management `,
         `Cema 223 Forest Management Assessment` = `Cema 223 Forest Management Assessment` 
         + `223 Forest Management Assessment`, 
         `Cema 218 Carbon Sequestration And Greenhouse Gas Mitigation Assessment` = 
           `Cema 218 Carbon Sequestration And Greenhouse Gas Mitigation Assessment` 
         + `218 Carbon Sequestration And Greenhouse Gas Mitigation Assessment`) %>%
  select(-`340 Cover Crop `, 
         -`390 Riparian Herbaceous Cover `,
         -`E590a Improving Fertilizer Uptake Efficiency And Reducing Risk Of Fertilizer Losses`,
         -`590 Nutrient Management `,
         -`223 Forest Management Assessment`,
         -`218 Carbon Sequestration And Greenhouse Gas Mitigation Assessment`)

# Sort in descending order of frequency
frequency_practices <- practice_counts %>%
  pivot_longer(cols = everything(), names_to = "Practice", values_to = "Count") %>%
  arrange(desc(Count))

# Graph the results with a stacked bar chart
PCSC_frequency_practices_plot <- frequency_practices %>%
  slice(1:15) %>%
  ggplot(aes(x = Count, y = reorder(Practice, Count))) + 
  geom_bar(stat = "identity", fill = "skyblue") + 
  theme_minimal(base_size = 16) +
  labs(title = "Top 15 PCSC Practices by Frequency",
       x = "Number of PCSC Projects for which a Practice is Eligible", y = "")

PCSC_frequency_practices_plot

## Figure 5: Historical Share of Support for CSAF Practices ----

# Filter information from relevant programs
CSAF <- Practice_Political_Download %>%
  filter(obligation_fy != "Total", 
         certification_fy == "Total",
         geography_level == "National",
         practice_code != "Total",
         !program %in% c("WHIP","AMA", "AWEP"))

# Find yearly dollar totals before filtering for CSAF practices
CSAF <- CSAF %>%
  group_by(obligation_fy) %>%
  mutate(total_dollars_ob_fy = sum(dollars_obligated, na.rm = TRUE)) %>%
  ungroup() %>%
  filter(practice_code %in% c(327, "E327A", "E327B", 328, "E328A", "E328B",
                              "E328E", "E328F", "E328N", "E328O", 329, "E329A", 
                              "E329B", "E329C", "E329D", "E329E", 332, 336, 340,
                              "E340A", "E340B", "E340C", "E340D", "E340F", 
                              "E340G", "E340H", "E340I", "E340J", 345, "E345A",
                              "E345B", "E345C", "E345D", "E345E", 386, "E386A",
                              "E386B", "E386C", "E386D", "E386E", 393, "E393A",
                              412, "E412A", 484, "E484A", "E484B", "E484C", 
                              "E484D", 585, 601, 603, 590, "E590A", "E590B",
                              "E590C", "E590D", 317, 313, 366, 367, 592, 632,
                              314, "E314A", 315, "E315A", 338, "E338A", 512, 
                              "E512A", "E512B", "E512C", "E512D", "E512I",
                              "E512J", "E512L", "E512M", 528, "E528A", "E528F",
                              "E528G", "E528G", "E528H", "E528I", "E528J",
                              "E528L", "E528M", "E528N", "E528O", "E528P",
                              "E528R", "E528S", "E528T", "E528U", 550, "E550A",
                              "E550B", 311, 342, 379, 380, 381, "E381A", 383,
                              "E383A", 384, "E384A", 390, "E390A", "E390B", 391,
                              "E391A", "E391B", "E391C", 420, "E420A", "E420B",
                              422, 612, "E612B", "E612C", "E612G", 643, "E643D",
                              666, "E666A", "E66D", "E666E", "E666F", "E666H",
                              "E666I", "E666J", "E666K", "E666L", "E666P",
                              "E666R", "E666S", 453, 543, 372, "E372A", "E372B",
                              374, 430, 441, 442, 533, "E533C", "E533D", 672,
                              670, 657, 449, "E449B", "B000FST5", "B000CPL25")) %>%
  group_by(obligation_fy) %>%
  mutate(CS_dollars_ob_fy = sum(dollars_obligated, na.rm = TRUE)) %>%
  mutate(percent_CS = CS_dollars_ob_fy / total_dollars_ob_fy * 100) %>% # Find yearly percentage of CSAF funding
  ungroup()

# Summarize yearly changes
CSAF_yrs <- CSAF %>%
  summarize(obligation_fy = unique(obligation_fy),
            total_dollars_ob_fy = unique(total_dollars_ob_fy),
            CS_dollars_ob_fy = unique(CS_dollars_ob_fy),
            percent_CS = unique(percent_CS))
CSAF_yrs$obligation_fy <- as.numeric(CSAF_yrs$obligation_fy)
CSAF_yrs <- CSAF_yrs %>%
  arrange(obligation_fy)

# Adjust dollars to billions
CSAF_yrs <- CSAF_yrs %>%
  mutate(total_dollars_ob_fy_bil = total_dollars_ob_fy/1e9,
         CS_dollars_ob_fy_bil = CS_dollars_ob_fy/1e9) %>%
  select(-total_dollars_ob_fy, -CS_dollars_ob_fy) %>%
  mutate(Other = total_dollars_ob_fy_bil - CS_dollars_ob_fy_bil) %>%
  select(-total_dollars_ob_fy_bil) %>%
  rename(CSAF = CS_dollars_ob_fy_bil)

# Pivot longer
CSAF_yrs <- CSAF_yrs %>%
  pivot_longer(cols = c("Other", "CSAF"),
               names_to = "type", values_to = "dollars")

# Create stacked bar chart
CS_graph <- ggplot(CSAF_yrs, aes(x = factor(obligation_fy), y = dollars, 
                                 fill = factor(type, levels = c("Other",
                                                                "CSAF")))) + 
  geom_bar(stat = "identity", position = "stack") +
  geom_text(data = subset(CSAF_yrs, type == "CSAF"), 
            aes(label = sprintf("%.2f", percent_CS)), # Label with percentage CSAF, limiting to two digits after decimal
            vjust = -0.5, color = "black") +
  scale_x_discrete() + # Show each unique year on x-axis
  labs(x = "Year", y = "Dollars in Billions", fill = "Practices Supported", 
       title = "Historical Share of Support for CSAF Practices") + 
  theme_minimal(base_size = 16) +
  theme(legend.position = "bottom")

CS_graph

## Figure 6: Share of Dollars Dedicated to HUPs by Program and Contract Status ----

# Load in data
contract_status_hup <- read_csv("/Users/annedb20/csa/Contract Download Table - HUP.csv") %>% 
  clean_names()

# Remove totals
contract_status_hup_filtered <- 
  contract_status_hup %>% 
  select(-index) %>% 
  filter(hist_underserved != "Total", 
         contract_status != "Total") %>% 
  # Add a new column that collapses IRA and Farmbill programs into one, 
  # As well as CSP-GCI into CSP and RCPP-CSP and RCPP-EQIP
  mutate(
    program_short = case_when(
      str_detect(program, "RCPP") ~ "RCPP",
      str_detect(program, "CSP") ~ "CSP",
      str_detect(program, "CStwP") ~ "CSP",
      str_detect(program, "EQIP") ~ "EQIP",
      TRUE ~ program)) # Keep the original value if no match

# Change dollars_obligated variable to a numeric one
contract_status_hup_filtered$dollars_obligated = gsub( #Remove dollar signs
  "\\$", "", contract_status_hup_filtered$dollars_obligated)
contract_status_hup_filtered$dollars_obligated = gsub( #Remove commas
  "\\,", "", contract_status_hup_filtered$dollars_obligated)
contract_status_hup_filtered$dollars_obligated <- as.numeric(
  contract_status_hup_filtered$dollars_obligated)

# Create new dataset representing HUP shares of dollars
hup_share_dollars <- contract_status_hup_filtered %>% 
  filter(contract_fiscal_year != "Total") %>%
  group_by(program_short, contract_status, hist_underserved) %>%
  # Generate a variable that is the sum of dollars_obligated for each program, contract status, and HUP status
  mutate(sum_dollars_obligated = sum(dollars_obligated, na.rm = TRUE)) %>% 
  ungroup() %>%
  group_by(program_short, contract_status) %>% 
  # Find HUP share of dollars obligated to contracts of different statuses and programs
  mutate(all_dollars = sum(dollars_obligated, na.rm = TRUE),
         share_hist_underserved = ifelse(
           hist_underserved == 1, sum_dollars_obligated / all_dollars * 100, NA)) %>% 
  # Filter out irrelevant info
  filter(hist_underserved != "0", 
         !contract_status %in% c("Approved", "Eligible", "Preapproved", "Total"),
         !program_short %in% c("AWEP", "WHIP", "AMA")) %>%
  # Find total contracts for each program status
  mutate(sum_contract_counts = sum(contract_count, na.rm = TRUE)) %>%
  ungroup()

# Identify minimum year
min_year <- min(contract_status_hup$contract_fiscal_year)

# Create the bar chart
hup_share_dollars_plot <- ggplot(hup_share_dollars, aes(x = share_hist_underserved, 
                                                        y = program_short,
                                                        fill = factor(contract_status, 
                                                                      levels = c("Terminated", "Completed", "Cancelled", "Active")))) +
  geom_col(position = position_dodge(width = 0.75), color = "white", width = 0.7) +
  scale_fill_manual(values = c("Active" = "#a6dba0", 
                               "Cancelled" = "#f4a582", # Mutually agreeable
                               "Terminated" = "tomato", # Red: violation of terms
                               "Completed" = "#018571"),
                    guide = guide_legend(reverse = TRUE)) + 
  labs(fill = "Contract Status", 
       y = "", x = "Share of Dollars in a Given Status Associated with HUPs", 
       title = "Share of Dollars Dedicated to HUPs by Program and Contract Status",
       subtitle = paste0("Fiscal Year ", min_year, " - 2023"),
       caption = "Data Source: USDA NRCS Conservational Financial Assistance Data") +
  guides(fill = guide_legend(reverse = TRUE)) +
  scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, 10), expand = c(0, 0)) +
  # start the y axis at the 0 line
  scale_y_discrete(expand = c(0, 0)) +
  geom_vline(xintercept = 40, linetype = "dashed", color = "blue") +
  geom_text(aes(label = sum_contract_counts), position = position_dodge(width = .75),
            hjust = -0.1, vjust = 0.5, show.legend = F, size = 5) + # Add labels, adjust size and position, and remove from legend
  theme_classic() + # Increase font size
  theme(plot.caption = element_text(hjust = 0),
        legend.position = "bottom",
        panel.grid.major = element_blank(), # Remove major grid lines
        panel.grid.minor = element_blank(),
        text = element_text(size = 20),
        plot.margin = margin(1, 1, 1, 0, "cm")) # Increase base font size for all text elements

hup_share_dollars_plot

## Figure 7: Total Dollars Obligated by Program ----

# Upload NASS data
NASS_producers_by_state <- read.csv("/Users/annedb20/Downloads/producers_by_state_agcensus2022_v2.csv")

# Create dataset for state dollar totals for historical programs
historical_dollar_totals_per_state <- 
  Contract_Political_Download %>% 
  # Filter unnecessary information
  filter(state != "Total",
         geography_level == "State",
         county_name == "Total",
         historically_underserved == "Total",
         suppressed != "TRUE",
         obligation_fy == "Total",
         !program %in% c("AWEP", "AMA", "WHIP")) %>% 
  # Creater broader program values
  mutate(
    program_short = case_when(
      str_detect(program, "RCPP") ~ "RCPP",
      str_detect(program, "CSP") ~ "CSP",
      str_detect(program, "CStwP") ~ "CSP",
      str_detect(program, "EQIP") ~ "EQIP",
      TRUE ~ program)) %>% # Keep the original value if no match
  select(-program) %>%
  rename(program = program_short) %>%
  # Filter for total contract status by taking maximum contract counts (peculiarity of the dataset)
  group_by(state, program, obligation_fy) %>%
  filter(contract_count == max(contract_count)) %>%
  ungroup() %>% 
  # Find totals dollars obligated for each state from historical programs
  group_by(state) %>%
  select(state, program, dollars_obligated, contract_count, treated_acres) %>% 
  mutate(sum_dollars_obligated = sum(dollars_obligated)) %>%
  ungroup() %>% 
  arrange(-sum_dollars_obligated, state, program) %>%
  # Add region variable (derived from USDA IRA Data Visualization Tool: https://publicdashboards.dl.usda.gov/t/FPAC_PUB/views/InflationReductionActDataVisualizationTool/IRAEndofYearReport?%3Aembed=y&%3AisGuestRedirectFromVizportal=y)
  mutate(region = case_when(state %in% c("Alaska", "Hawaii", "Washington", 
                                         "Oregon", "California", "Idaho", 
                                         "Montana", "Wyoming", "Utah", "Nevada",
                                         "Arizona", "New Mexico", "Colorado") ~ "West",
                            state %in% c("Virginia", "Kentucky", "Tennessee",
                                         "North Carolina", "Arkansas", "Louisiana",
                                         "Florida", "Georgia", "Mississippi", 
                                         "Alabama", "South Carolina") ~ "Southeast", 
                            state %in% c("Maine", "New Hampshire", "Vermont", 
                                         "Massachusetts", "Connecticut", "Rhode Island", 
                                         "New York", "Pennsylvania", "New Jersey",
                                         "Delaware", "Maryland", "West Virginia", 
                                         "Ohio", "Michigan") ~ "Northeast",
                            state %in% c("Texas", "Oklahoma", "Kansas", "Missouri", 
                                         "Illinois", "Indiana", "Wisconsin", 
                                         "Minnesota", "Iowa", "Nebraska",
                                         "South Dakota", "North Dakota") ~ "Central",
                            state %in% c("U.S. Virgin Islands", "Guam", "Puerto Rico", 
                                         "Northern Mariana Islands", "American Samoa") ~ 
                              "Is. Terr.")) %>%
  select(-contract_count, -treated_acres)

# Clean up variables for merging
NASS_producers_by_state$State <- str_to_title(NASS_producers_by_state$State) # Format capitalization
names(Partnerships_for_CS_Commodities_data)[names(Partnerships_for_CS_Commodities_data) == "States Covered Under Agreement"] <- "State" # Rename column to match NASS
PCSC_states_long <- separate_rows(Partnerships_for_CS_Commodities_data, State, sep = ",") # Separate states into their own rows
PCSC_states_long <- PCSC_states_long %>% # Mutate states to long forms of names -- some data lost for Tribal and territories
  mutate(State = case_when(State == "AL" ~ "Alabama", State == "AZ" ~ "Arizona", 
                           State == "AR" ~ "Arkansas", State == "AK" ~ "Alaska", 
                           State == "CA" ~ "California", State == "CO" ~ "Colorado",
                           State == "DE" ~ "Delaware", State == "CT" ~ "Connecticut",
                           State == "FL" ~ "Florida", State == "GA" ~ "Georgia",
                           State == "HI" ~ "Hawaii", State == "ID" ~ "Idaho",
                           State == "IL" ~ "Illinois", State == "IN" ~ "Indiana",
                           State == "IA" ~ "Iowa", State == "KS" ~ "Kansas",
                           State == "KY" ~ "Kentucky", State == "LA" ~ "Louisiana",
                           State == "ME" ~ "Maine", State == "MD" ~ "Maryland", 
                           State == "MA" ~ "Massachusetts", State == "MI" ~ "Michigan",
                           State == "MN" ~ "Minnesota", State == "MS" ~ "Mississippi",
                           State == "MO" ~ "Missouri", State == "MT" ~ "Montana",
                           State == "NE" ~ "Nebraska", State == "NH" ~ "New Hampshire",
                           State == "NM" ~ "New Mexico", State == "NV" ~ "Nevada",
                           State == "NJ" ~ "New Jersey", State == "NY" ~ "New York",
                           State == "NC" ~ "North Carolina", State == "ND" ~ "North Dakota",
                           State == "OH" ~ "Ohio", State == "OK" ~ "Oklahoma",
                           State == "OR" ~ "Oregon", State == "PA" ~ "Pennsylvania",
                           State == "RI" ~ "Rhode Island", State == "SC" ~ "South Carolina",
                           State == "SD" ~ "South Dakota", State == "TN" ~ "Tennessee",
                           State == "TX" ~ "Texas", State == "UT" ~ "Utah",
                           State == "VA" ~ "Virginia", State == "VT" ~ "Vermont",
                           State == "WA" ~ "Washington", State == "WV" ~ "West Virginia",
                           State == "WI" ~ "Wisconsin", State == "WY" ~ "Wyoming"))

# Merge datasets 
PCSC_producers_by_state <- merge(PCSC_states_long, NASS_producers_by_state, by = "State")

# Clean dataset
PCSC_producers_numbers <- PCSC_producers_by_state %>%
  select(-`Project Summary`, -`Short Agreement Description`, -`MMRV Highlights`, 
         -`Marketing Highlights`, -`Equity Highlights`, -Program, -Period, 
         -Week.Ending, -Geo.Level, -State.ANSI, -Ag.District, -Ag.District.Code,
         -County, -County.ANSI, -Zip.Code, -Region, -watershed_code, -Watershed,
         -Commodity, -Domain, -Domain.Category, -Data.Item, -CV....)

# Rename number of producers column
names(PCSC_producers_numbers)[names(PCSC_producers_numbers) == "Value"] <- "Number of Producers"

# Remove commas and make number of producers into numerical variable
PCSC_producers_numbers$`Number of Producers` <- gsub(",", "", PCSC_producers_numbers$`Number of Producers`)
PCSC_producers_numbers$`Number of Producers` <- as.numeric(PCSC_producers_numbers$`Number of Producers`)

# Sum dollars per state across projects
PCSC_producers_numbers_sum <- PCSC_producers_numbers %>%
  group_by(Applicant) %>%
  mutate(Project_Producer_Number = sum(`Number of Producers`)) %>% # Create variable of total producers per project
  ungroup() %>%
  group_by(Applicant, State) %>%
  mutate(Percent_State_Project = `Number of Producers`/Project_Producer_Number * 100, # Create variable of percentage of project producers which belong to each state
         Dollars_State_Project = `Federal Funding` * Percent_State_Project / 100, # Create variable which takes the percentage of federal dollars for each state and project
         Nonfed_Dollars_Project = `Non-Federal Match` * Percent_State_Project / 100) %>% # Create variable which takes the percentage of non-federal dollars for each state and project
  ungroup() %>%
  group_by(State) %>%
  summarize(Sum_Dollars_State = sum(Dollars_State_Project),
         Sum_Nonfed_Dollars_State = sum(Nonfed_Dollars_Project)) %>% # Add up project dollars for each state
  ungroup() %>%
  # Add region variable (derived from USDA IRA Data Visualization Tool: https://publicdashboards.dl.usda.gov/t/FPAC_PUB/views/InflationReductionActDataVisualizationTool/IRAEndofYearReport?%3Aembed=y&%3AisGuestRedirectFromVizportal=y)
  mutate(region = case_when(State %in% c("Alaska", "Hawaii", "Washington", 
                                         "Oregon", "California", "Idaho", 
                                         "Montana", "Wyoming", "Utah", "Nevada",
                                         "Arizona", "New Mexico", "Colorado") ~ "West",
                            State %in% c("Virginia", "Kentucky", "Tennessee",
                                         "North Carolina", "Arkansas", "Louisiana",
                                         "Florida", "Georgia", "Mississippi", 
                                         "Alabama", "South Carolina") ~ "Southeast", 
                            State %in% c("Maine", "New Hampshire", "Vermont", 
                                         "Massachusetts", "Connecticut", "Rhode Island", 
                                         "New York", "Pennsylvania", "New Jersey",
                                         "Delaware", "Maryland", "West Virginia", 
                                         "Ohio", "Michigan") ~ "Northeast",
                            State %in% c("Texas", "Oklahoma", "Kansas", "Missouri", 
                                         "Illinois", "Indiana", "Wisconsin", 
                                         "Minnesota", "Iowa", "Nebraska",
                                         "South Dakota", "North Dakota") ~ "Central",
                            State %in% c("U.S. Virgin Islands", "Guam", "Puerto Rico", 
                                         "Northern Mariana Islands", "American Samoa") ~ 
                              "Is. Terr."),
         # Add program variable for merging
         program = "PCSC") %>%
  # Rename variables to match historical totals' dataset
  rename(state = State,
         dollars_obligated = Sum_Dollars_State)

# Combine PCSC and historical datasets
All_Programs_Total_Dollars <- bind_rows(historical_dollar_totals_per_state, 
                                        PCSC_producers_numbers_sum)

# Edit totals to reflect additional PCSC dollars
All_Programs_Total_Dollars <- All_Programs_Total_Dollars %>%
  group_by(state) %>%
  mutate(sum_dollars_obligated = sum(dollars_obligated)) %>%
  ungroup()

# Establish sorting order for levels
sorting_order <- All_Programs_Total_Dollars %>%
  group_by(state) %>%
  summarise(Total = sum(dollars_obligated)) %>%
  arrange(Total) %>%
  pull(state)

# Sort out rows for which PCSC dollars are unknown (due to lack of NASS data)
All_Programs_Total_Dollars <- All_Programs_Total_Dollars %>%
  filter(region != "Is. Terr.")

# Create the bar chart
All_Programs_Total_Dollars_Plot <- All_Programs_Total_Dollars %>%
  mutate(state = factor(state, levels = sorting_order),
         region = factor(region, levels = c("Central", "Southeast", "West", 
                                            "Northeast")),
         program = factor(program, levels = c("PCSC", "RCPP", "CSP", "EQIP"))) %>%
  ggplot(aes(y = state, x = dollars_obligated / 1e6, fill = program)) + 
  geom_bar(stat = "identity", position = "stack") +
  labs(x = "Dollars in Millions", y = "",
       title = "Total Dollars Obligated by Program", fill = "Program") +
  facet_grid(region ~ ., scales = "free_y", space = "free") + # Separate graph by region
  theme_minimal(base_size = 18) + # Increase font size of all elements
  theme(axis.text.y = element_text(angle = 0, hjust = 1), legend.position = "bottom") +
  scale_x_continuous(labels = scales::label_comma(), breaks = c(0, 500, 1000)) 

All_Programs_Total_Dollars_Plot

## Figure 8: Top 15 PCSC Crops by Frequency ---- 

# Remove spaces after commas and capitalize first letters of all words to prevent duplicates
Partnerships_for_CS_Commodities_data_clean <- Partnerships_for_CS_Commodities_data %>%
  mutate(Major_Commodities_Under_Agreement = gsub(",\\s*", ",", `Major Commodities Under Agreement`),
         Major_Commodities_Under_Agreement = str_to_title(Major_Commodities_Under_Agreement)) %>%
  select(-`Major Commodities Under Agreement`)

# Split States_Covered_Under_Agreements into separate columns for each state
PCSC_data_split_by_crops <- Partnerships_for_CS_Commodities_data_clean %>%
  separate_rows(Major_Commodities_Under_Agreement, sep = ",") %>%
  mutate(Major_Commodities_Under_Agreement = trimws(Major_Commodities_Under_Agreement)) %>%
  pivot_wider(names_from = Major_Commodities_Under_Agreement, 
              values_from = Major_Commodities_Under_Agreement, 
              values_fn = length, values_fill = list(Major_Commodities_Under_Agreement = 0))

# Group data by states and sum up counts
crop_counts <- PCSC_data_split_by_crops %>%
  summarize(across(.cols = -Applicant, ~sum(. == 1, na.rm = TRUE))) %>%
  # Remove unnecessary columns
  select(-`Project Summary`, -`Available Practices`, 
         -`Short Agreement Description`, -State, 
         -`MMRV Highlights`, -`Marketing Highlights`, - `Equity Highlights`, 
         -`Federal Funding`, -`Non-Federal Match`)

# Sort the result by descending frequency
frequency_crops <- crop_counts %>%
  pivot_longer(cols = everything(), names_to = "Crop", values_to = "Count") %>%
  arrange(desc(Count)) %>%
  slice(1:15)

# Create the bar graph
PCSC_frequency_crops_plot <- ggplot(frequency_crops, aes(
  x = Count, y = reorder(Crop, Count))) + geom_bar(stat = "identity", 
                                                   fill = "skyblue") + 
  theme_minimal(base_size = 16) +
  labs(title = "Top 15 PCSC Crops by Frequency",
       x = "Number of PCSC Projects for which Crop is Eligible", y = "")

PCSC_frequency_crops_plot

## Figure 9: Dollars Obligated by Program and Fiscal Year (2014-2023) ----

# Generate a dataset that only shows the total annual values (dollars obligated, contracts) by program and state
totals_state <- 
  Contract_Political_Download %>% 
  filter(geography_level == "State",
    county_name == "Total",
    historically_underserved == "Total",
    suppressed != "TRUE"
  ) %>% 
  arrange(state, program, obligation_fy, dollars_obligated) %>% 
  group_by(state, program, obligation_fy) %>%
  # When using this dataset, taking the maximum dollars_obligated essentially filters for "total" contract statuses
  filter(dollars_obligated == max(dollars_obligated)) %>%
  ungroup()  

# Generate a stacked bar chart that shows the total dollars obligated by fiscal year, facetted by state
dollars_year_state_program <- 
  totals_state %>% 
  filter(dollars_obligated != "Total", 
         obligation_fy != "Total") %>% 
  mutate(dollars_obligated = dollars_obligated / 1e6) %>% # Divide by millions
  # Ensure obligation_fy is treated as a factor and ordered if not already
  mutate(obligation_fy = factor(obligation_fy, levels = unique(obligation_fy))) %>%
  ggplot(aes(x = obligation_fy, y = dollars_obligated, fill = program)) +
  geom_col(position = "stack") +
  # Facet_wrap by state should have a free y axis scale
  facet_wrap(~ state, scales = "free_y") +
  labs(title = "Dollars Obligated by Program, Fiscal Year, and State",
       subtitle = "Note y-axis scale varies by state",
       x = "Fiscal Year", 
       y = "Dollars Obligated, in Millions",
       fill = "Program") +
  scale_x_discrete(labels = function(x) ifelse(seq_along(x) %% 2 == 1, x, "")) +
  theme(axis.text.x = element_text(angle = 90,  hjust = 1, vjust = 0.5),
        legend.position = "bottom")

dollars_year_state_program

## Figure 10: Heatmap of Top 5 Practice Types by State ----

# Create dataset with state- and practice-specific information, excluding CSP Annual Payments
state_practices_all <- Practice_Political_Download %>%
  filter(suppressed != "TRUE", geography_level != "National", 
         county_name == "Total", obligation_fy == "Total",
         certification_fy == "Total", practice_code != "Total", 
         practice_name != "Total", program != "AWEP", program!= "WHIP",
         program != "AMA", practice_code != "CROP", practice_code != "RANGE",
         practice_code != "PAST", practice_code != "MINPAY", 
         practice_code != "E300EAP1", practice_code != "E300EAP2",
         practice_code != "NIPF", practice_code != "PCROP", practice_code != "FARM",
         practice_code != "AGLAND") %>%
  select(-geography_level, -county_name, -fips_code) %>%
  # Add region variable (derived from USDA IRA Data Visualization Tool: https://publicdashboards.dl.usda.gov/t/FPAC_PUB/views/FY24IRAReport/FY24IRADashboard?%3Aembed=y&%3AisGuestRedirectFromVizportal=y)
  mutate(region = case_when(state %in% c("Alaska", "Hawaii", "Washington", 
                                         "Oregon", "California", "Idaho", 
                                         "Montana", "Wyoming", "Utah", "Nevada",
                                         "Arizona", "New Mexico", "Colorado") ~ "West",
                            state %in% c("Virginia", "Kentucky", "Tennessee",
                                         "North Carolina", "Arkansas", "Louisiana",
                                         "Florida", "Georgia", "Mississippi", 
                                         "Alabama", "South Carolina") ~ "Southeast", 
                            state %in% c("Maine", "New Hampshire", "Vermont", 
                                         "Massachusetts", "Connecticut", "Rhode Island", 
                                         "New York", "Pennsylvania", "New Jersey",
                                         "Delaware", "Maryland", "West Virginia", 
                                         "Ohio", "Michigan") ~ "Northeast",
                            state %in% c("Texas", "Oklahoma", "Kansas", "Missouri", 
                                         "Illinois", "Indiana", "Wisconsin", 
                                         "Minnesota", "Iowa", "Nebraska",
                                         "South Dakota", "North Dakota") ~ "Central",
                            state %in% c("U.S. Virgin Islands", "Guam", "Puerto Rico", 
                                         "Northern Mariana Islands", "American Samoa") ~ "Is. Terr."))

# Take sum of dollars obligated to each practice in each state
top_practice_codes <- 
  state_practices_all %>%
  group_by(state, practice_code) %>%
  summarize(region = region,
            practice_name = practice_name,
            practice_dollars_obligated = sum(dollars_obligated)) %>%
  ungroup()

# Filter out duplicate rows so ranking is valid
top_practice_codes <- distinct(top_practice_codes)

# Take top 5 practice codes for each state
top_practice_codes <- top_practice_codes %>%
  group_by(state) %>%
  top_n(5, practice_dollars_obligated) %>%
  mutate(ranking = rank(-practice_dollars_obligated)) %>%
  ungroup()

# Establish order for states
top_practice_codes$state <- factor(top_practice_codes$state, levels = 
                                     unique(top_practice_codes$state[order(top_practice_codes$region)]))

# Add categories for each practice
top_practice_codes <- top_practice_codes %>%
  mutate(practice_type = case_when(practice_name %in% c("Clearing and Snagging",
                                                        "Stream Habitat Improvement and Management",
                                                        "Streambank and Shoreline Protection",
                                                        "Pond Sealing or Lining - Concrete")
                                   ~ "Surface Water Improvement",
                                   practice_name %in% c("Animal Mortality Facility", 
                                                        "Composting Facility", "Waste Storage Facility",
                                                        "Waste Transfer") ~ "Waste Disposal",
                                   practice_name %in% c("Early Successional Habitat Development-Mgt", 
                                                        "Brush Management", 
                                                        "Herbaceous Weed Treatment",
                                                        "Conservation Crop Rotation", "Cover Crop",
                                                        "Planting for high carbon sequestration rate", 
                                                        "Pasture and Hay Planting", "Range Planting",
                                                        "Restoration of Rare or Declining Natural Communities",
                                                        "Prescribed Burning", "Vegetative Barrier")
                                   ~ "Vegetation Management to Enhance Soil and Habitat",
                                   practice_name %in% c("Energy Efficient Agricultural Operation", 
                                                        "Energy Efficient Building Envelope") ~ "Energy Efficient Activity",
                                   practice_name %in% c("Existing Activity Payment-Land Use",
                                                        "Existing Activity Payment-Resource Concern") ~ "Existing Activity Payment",
                                   practice_name %in% c("Fence", "Trails and Walkways", 
                                                        "Roofs and Covers", "High Tunnel System",
                                                        "Terrace", "Access Road", 
                                                        "Grade Stabilization Structure") ~ "Functional Infrastructure",
                                   practice_name %in% c("Heavy Use Area Protection", "Mulching") ~ "Ground Cover (excluding crops)",
                                   practice_name %in% c("Incorporating wildlife refuge areas in contingency plans for wildlife.",
                                                        "Prescribed Grazing") ~ "Grazing Plans",
                                   practice_name %in% c("Irrigation Land Leveling", 
                                                        "Irrigation Pipeline",
                                                        "Irrigation Reservoir",
                                                        "Irrigation System, Microirrigation",
                                                        "Sprinkler System") ~ "Irrigation",
                                   practice_name %in% c("Livestock Pipeline", "Watering Facility") ~ "Watering Livestock",
                                   practice_name %in% c("Pumping Plant", "Water Well", 
                                                        "Structure for Water Control", 
                                                        "Underground Outlet") ~ "Water Access",
                                   practice_name %in% c("Reduce risk of pesticides in surface water by utilizing precision pesticide application techniques",
                                                        "Reduce risks of nutrient losses to surface water by utilizing precision ag technologies",
                                                        "Nutrient Management", "Agrichemical Handling Facility",
                                                        "Improving nutrient uptake efficiency and reducing risk of nutrient losses",
                                                        "Pest Management Conservation System") ~ "Nutrient Control",
                                   practice_name %in% c("Tree/Shrub Establishment", 
                                                        "Tree/Shrub Site Preparation",
                                                        "Forest Stand Improvement",
                                                        "Woody Residue Treatment",
                                                        "Windbreak/Shelterbelt Establishment and Renovation") ~ 
                                     "Tree and Forestry Management",
                                   practice_name %in% "Bivalve Aquaculture Gear and Biofouling Control" ~ "Aquaculture",
                                   practice_name %in% "Combustion System Improvement" ~ "Combustion System Improvement",
                                   practice_name %in% c("Residue and Tillage Management, Reduced Till",
                                                        "Residue and Tillage Management, No Till") ~ "Residue and Tillage Mgt",
                                   practice_name %in% "Obstruction Removal" ~ "Obstruction Removal",
                                   practice_name %in% "Grassland Conservation Initiative" ~ "Grassland Conservation Initiative"),
         # Add abbreviations for easier viewing on the graph
         abbreviations = case_when(practice_name %in% "Clearing and Snagging" ~ "Clear & Snag",
                                   practice_name %in% "Grade Stabilization Structure" ~ "Grade Stablization",
                                   practice_name %in% "Stream Habitat Improvement and Management" ~ "Stream Habitat",
                                   practice_name %in% "Streambank and Shoreline Protection" ~ "Bank Protection",
                                   practice_name %in% "Animal Mortality Facility" ~ "Animal Mortality",
                                   practice_name %in% "Composting Facility" ~ "Compost",
                                   practice_name %in% "Waste Storage Facility" ~ "Waste Storage",
                                   practice_name %in% "Waste Transfer" ~ "Waste Transfer",
                                   practice_name %in% "Conservation Crop Rotation" ~ "Crop Rotate",
                                   practice_name %in% "Cover Crop" ~ "Cover Crop",
                                   practice_name %in% "Planting for high carbon sequestration rate" ~ "Planting-C Storage",
                                   practice_name %in% "Pasture and Hay Planting" ~ "Planting-Pasture/Hay",
                                   practice_name %in% "Range Planting" ~ "Planting-Range",
                                   practice_name %in% "Restoration of Rare or Declining Natural Communities" ~ "Habitat Restore",
                                   practice_name %in% "Early Successional Habitat Development-Mgt" ~ "Temp Habitat Mgt",
                                   practice_name %in% "Brush Management" ~ "Brush Mgt",
                                   practice_name %in% "Herbaceous Weed Treatment" ~ "Weed Trtmt",
                                   practice_name %in% "Cropland Annual Payment" ~ "Crop AP",
                                   practice_name %in% "Non-Industrial Private Forest Land Annual Payment" ~ "Forest AP",
                                   practice_name %in% "Pasture Annual Payment" ~ "Pasture AP",
                                   practice_name %in% "Pastured Cropland Annual Payment" ~ "Pasture-Crop AP",
                                   practice_name %in% "Rangeland Annual Payment" ~ "Range AP",
                                   practice_name %in% "Energy Efficient Agricultural Operation" ~ "EE Ag Op",
                                   practice_name %in% "Energy Efficient Building Envelope" ~ "EE Bldg Envelope",
                                   practice_name %in% "Existing Activity Payment-Land Use" ~ "EAP-Land Use",
                                   practice_name %in% "Existing Activity Payment-Resource Concern" ~ "EAP-Resource",
                                   practice_name %in% "Fence" ~ "Fence",
                                   practice_name %in% "Trails and Walkways" ~ "Trls & Wlkways",
                                   practice_name %in% "Roofs and Covers" ~ "Roofs & Covers",
                                   practice_name %in% "High Tunnel System" ~ "High Tunnel",
                                   practice_name %in% "Terrace" ~ "Terrace",
                                   practice_name %in% "Heavy Use Area Protection" ~ "Hvy Use Area Protn",
                                   practice_name %in% "Mulching" ~ "Mulching",
                                   practice_name %in% "Incorporating wildlife refuge areas in contingency plans for wildlife." ~ "Wildlife Refuge",
                                   practice_name %in% "Prescribed Grazing" ~ "Prescr. Grazing",
                                   practice_name %in% "Irrigation Land Leveling" ~ "Irgn Land Level",
                                   practice_name %in% "Irrigation Pipeline" ~ "Irgn Pipeline",
                                   practice_name %in% "Irrigation Reservoir" ~ "Irgn Reservoir",
                                   practice_name %in% "Irrigation System, Microirrigation" ~ "Micro-irgn",
                                   practice_name %in% "Sprinkler System" ~ "Sprinkler",
                                   practice_name %in% "Livestock Pipeline" ~ "Livestock Pipe", 
                                   practice_name %in% "Watering Facility" ~ "Wtr Facility",
                                   practice_name %in% "Pumping Plant" ~ "Pump Plant",
                                   practice_name %in% "Water Well" ~ "Well",
                                   practice_name %in% "Structure for Water Control" ~ "Wtr Ctrl Struct",
                                   practice_name %in% "Underground Outlet" ~ "Undergrd Outlet",
                                   practice_name %in% "Reduce risk of pesticides in surface water by utilizing precision pesticide application techniques" ~ "Precise Pesticide Appln",
                                   practice_name %in% "Reduce risks of nutrient losses to surface water by utilizing precision ag technologies" ~ "Precise Ag Tech",
                                   practice_name %in% "Nutrient Management" ~ "Nutrient Mgt",
                                   practice_name %in% "Tree/Shrub Establishment" ~ "Tree/Shrub Estmt",
                                   practice_name %in% "Tree/Shrub Site Preparation" ~ "Tree/Shrub Prep",
                                   practice_name %in% "Forest Stand Improvement" ~ "Forest Improvemt",
                                   practice_name %in% "Woody Residue Treatment" ~ "Woody Residue Trtmt",
                                   practice_name %in% "Bivalve Aquaculture Gear and Biofouling Control" ~ "Aquaculture Ctrl",
                                   practice_name %in% "Combustion System Improvement" ~ "Combustn Sys Improvemt",
                                   practice_name %in% "Residue and Tillage Management, Reduced Till" ~ "Reduced Till",
                                   practice_name %in% "Residue and Tillage Management, No Till" ~ "No Till",
                                   practice_name %in% "Obstruction Removal" ~ "Obstructn Removal",
                                   practice_name %in% "Grassland Conservation Initiative" ~ "GCI",
                                   practice_name %in% "Windbreak/Shelterbelt Establishment and Renovation" ~ "Tree Windbreak",
                                   practice_name %in% "Pest Management Conservation System" ~ "Pest Mgt",
                                   practice_name %in% "Improving nutrient uptake efficiency and reducing risk of nutrient losses" ~ "Nutrient Uptake",
                                   practice_name %in% "Agrichemical Handling Facility" ~ "Ag.chem. Handling",
                                   practice_name %in% "Access Road" ~ "Access Road",
                                   practice_name %in% "Vegetative Barrier" ~ "Veg. Barrier",
                                   practice_name %in% "Prescribed Burning" ~ "Prescribed Burn",
                                   practice_name %in% "Pond Sealing or Lining - Concrete" ~ "Concrete Lining")) %>%
  # Establish order for regions
  mutate(region = factor(region, levels = c("Northeast", "Southeast", "Central",
                                            "West", "Is. Terr.")))

# Create heatmap
top_practice_codes_plot <-ggplot(top_practice_codes, aes(x = ranking, y = state, 
                                                         fill = practice_type, 
                                                         group = region)) +
  geom_tile() + 
  facet_grid(region ~ ., scales = "free_y", space = "free_y") + # Separate by region
  geom_text(aes(label = abbreviations), color = "white", size = 3) + # Add abbreviations 
  scale_fill_viridis_d() + # Set color scale
  # Adjust font sizes for legibility
  theme(plot.title = element_text(size = 16),
        axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 10),
        legend.title = element_text(size = 10), legend.text = element_text(size = 9),
        axis.title.x = element_text(size = 11), strip.text = element_text(size = 11),
        legend.position = "bottom") +
  labs(title = "Heatmap of Top 5 Practice Types by State", 
       x = "Practice Code Rank", y = "", fill = "Practice Type")

top_practice_codes_plot

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Tables ----
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  

## Table 2: Total Dollars Obligated, Acres Treated, and Contracts Offered (2014-2023) ----

totals_program <- Contract_Political_Download %>%
  filter(geography_level == "National", obligation_fy == "Total",
         fips_code == "Total", historically_underserved == "Total",
         !program %in% c("AWEP", "AMA", "WHIP")) %>%
  group_by(program) %>%
  filter(dollars_obligated == max(dollars_obligated, na.rm = TRUE)) %>%
  ungroup() %>%
  select(program, dollars_obligated, contract_count, treated_acres) %>%
  arrange(-dollars_obligated, program) %>%
  # Add formatting for output
  mutate(across(where(is.numeric), ~scales::comma(.))) %>%  # Add commas to numeric values
  rename_with(.fn = ~sapply(.x, function(name) {
    name %>% 
      gsub("_", " ", .) %>%  # Replace underscores with spaces
      tools::toTitleCase()  # Convert to title case
  }),
  .cols = everything()) %>% 
  kable(caption = "Total Dollars Obligated, Acres Treated, and Contracts Offered From 2014-2023 By Program",
        format = "latex", booktabs = TRUE, escape = FALSE, digits = 0,  align = "lrrr") 

## Table 3: Estimated PCSC Funding ----

# Goal: Create new table with 7 columns: state, number of producers, number of projects, 
# estimate PCSC fed funds, sum of other programs' funds, nonfed estimate, and percentage of funds which are PCSC federal

# Source PCSC_producers_numbers

# Pull out useful columns
PCSC_Table <- PCSC_producers_numbers %>%
  group_by(Applicant) %>%
  mutate(Project_Producer_Number = sum(`Number of Producers`)) %>% # Create variable of total producers per project
  ungroup() %>%
  group_by(Applicant, State) %>%
  mutate(Percent_State_Project = `Number of Producers`/Project_Producer_Number * 100, # Create variable of percentage of project producers which belong to each state
         Dollars_State_Project = `Federal Funding` * Percent_State_Project / 100, # Create variable which takes the percentage of federal dollars for each state and project
         Nonfed_Dollars_Project = `Non-Federal Match` * Percent_State_Project / 100) %>% # Create variable which takes the percentage of non-federal dollars for each state and project
  ungroup() %>%
  group_by(State) %>%
  mutate(Sum_Dollars_State = sum(Dollars_State_Project),
            Sum_Nonfed_Dollars_State = sum(Nonfed_Dollars_Project)) %>% # Add up project dollars for each state
  ungroup() %>%
  select(-Applicant, -`Major Commodities Under Agreement`, -Year,
         -Project_Producer_Number, -Percent_State_Project, -Dollars_State_Project,
         -Nonfed_Dollars_Project) %>%
  distinct() %>% # Remove duplicates created by removing other columns
  rename(Estimated_PCSC_Dollars = Sum_Dollars_State, # Create better names for table
         Number_of_Producers = 'Number of Producers',
         Estimated_PCSC_Nonfed_Match = Sum_Nonfed_Dollars_State)

# Create state frequency dataset by first cleaning the variable
Partnerships_for_CS_Commodities_data$`State` <- 
  str_replace_all(Partnerships_for_CS_Commodities_data$`State`, "(^|,|,)\\s*", "\\1")

# Split States_Covered_Under_Agreements into separate columns for each state
Partnerships_for_CS_Commodities_data_split <- Partnerships_for_CS_Commodities_data %>%
  separate_rows(State, sep = ",") %>%
  mutate(State = trimws(State)) %>%
  pivot_wider(names_from = State,
              values_from = State,
              values_fn = length, 
              values_fill = list(State = 0))

# Group data by states and sum up counts
state_counts <- Partnerships_for_CS_Commodities_data_split %>%
  summarize(across(.cols = -Applicant, ~sum(. == 1, na.rm = TRUE))) %>%
  # Remove unnecessary columns
  select(-`Project Summary`, -`Available Practices`, 
         -`Short Agreement Description`, -`Major Commodities Under Agreement`, 
         -`MMRV Highlights`, -`Marketing Highlights`, - `Equity Highlights`, 
         -`Federal Funding`, -`Non-Federal Match`)

# Pivot longer and sort by descending percentage
percentage_states <- state_counts %>%
  pivot_longer(cols = everything(), names_to = "State", values_to = "Count") %>%
  mutate(Percentage = Count/total_applicants * 100) %>%
  arrange(desc(Percentage))

# Adjust this state frequency dataset for integration
state_project_numbers <- percentage_states %>%
  # Remove "states" for which we do not have NASS data
  filter(State != "Tribal", State != "PR", State != "GU", 
         State != "Navajo Nation", State != "DC", State != "CNMI") %>%
  # Full state names
  mutate(State = case_when(State == "AL" ~ "Alabama", State == "AZ" ~ "Arizona", 
                           State == "AR" ~ "Arkansas", State == "AK" ~ "Alaska", 
                           State == "CA" ~ "California", State == "CO" ~ "Colorado",
                           State == "DE" ~ "Delaware", State == "CT" ~ "Connecticut",
                           State == "FL" ~ "Florida", State == "GA" ~ "Georgia",
                           State == "HI" ~ "Hawaii", State == "ID" ~ "Idaho",
                           State == "IL" ~ "Illinois", State == "IN" ~ "Indiana",
                           State == "IA" ~ "Iowa", State == "KS" ~ "Kansas",
                           State == "KY" ~ "Kentucky", State == "LA" ~ "Louisiana",
                           State == "ME" ~ "Maine", State == "MD" ~ "Maryland", 
                           State == "MA" ~ "Massachusetts", State == "MI" ~ "Michigan",
                           State == "MN" ~ "Minnesota", State == "MS" ~ "Mississippi",
                           State == "MO" ~ "Missouri", State == "MT" ~ "Montana",
                           State == "NE" ~ "Nebraska", State == "NH" ~ "New Hampshire",
                           State == "NM" ~ "New Mexico", State == "NV" ~ "Nevada",
                           State == "NJ" ~ "New Jersey", State == "NY" ~ "New York",
                           State == "NC" ~ "North Carolina", State == "ND" ~ "North Dakota",
                           State == "OH" ~ "Ohio", State == "OK" ~ "Oklahoma",
                           State == "OR" ~ "Oregon", State == "PA" ~ "Pennsylvania",
                           State == "RI" ~ "Rhode Island", State == "SC" ~ "South Carolina",
                           State == "SD" ~ "South Dakota", State == "TN" ~ "Tennessee",
                           State == "TX" ~ "Texas", State == "UT" ~ "Utah",
                           State == "VA" ~ "Virginia", State == "VT" ~ "Vermont",
                           State == "WA" ~ "Washington", State == "WV" ~ "West Virginia",
                           State == "WI" ~ "Wisconsin", State == "WY" ~ "Wyoming"))

# Merge with working table 
PCSC_Table <- merge(PCSC_Table, state_project_numbers, by = "State")

# Clean table
PCSC_Table <- PCSC_Table %>%
  select(-Percentage) %>%
  rename(Frequency_of_Project_Eligibility = Count)

# Extract sums from other programs for each state
totals_state_three_programs <- 
  Contract_Political_Download %>% 
  filter(#state != "Total",
    geography_level == "State",
    county_name == "Total",
    historically_underserved == "Total",
    suppressed != "TRUE",
    program != "AWEP",
    program != "WHIP",
    program != "AMA",
    obligation_fy != "Total",
  ) %>% 
  arrange(state, program, obligation_fy, dollars_obligated) %>% 
  group_by(state, program, obligation_fy) %>%
  filter(dollars_obligated == max(dollars_obligated)) %>%
  ungroup() %>%
  group_by(state) %>%
  summarize(sum_dollars_obligated = sum(dollars_obligated)) %>%
  rename(State = state)

# Merge with working table
PCSC_Table <- merge(PCSC_Table, totals_state_three_programs, by = "State")

# Clean and calculate percentage of total funds which are PCSC federal funds for each state
PCSC_Table <- PCSC_Table %>%
  rename(Sum_Older_Program_Dollars = sum_dollars_obligated) %>%
  group_by(State) %>%
  mutate(Percentage_Funds_PCSC = Estimated_PCSC_Dollars / 
           (Sum_Older_Program_Dollars + Estimated_PCSC_Dollars) * 100)

# Reorder columns
PCSC_Table <- PCSC_Table[, c("State", "Number_of_Producers", 
                             "Frequency_of_Project_Eligibility",
                             "Estimated_PCSC_Dollars", 
                             "Estimated_PCSC_Nonfed_Match",
                             "Sum_Older_Program_Dollars",
                             "Percentage_Funds_PCSC")]

# Adjust funds to millions for easier viewing
PCSC_Table <- PCSC_Table %>%
  mutate(Estimated_PCSC_Dollars = Estimated_PCSC_Dollars / 1e6,
         Sum_Older_Program_Dollars = Sum_Older_Program_Dollars / 1e6,
         Estimated_PCSC_Nonfed_Match = Estimated_PCSC_Nonfed_Match / 1e6) %>%
  rename(Sum_Older_Program_Dollars_Millions = Sum_Older_Program_Dollars,
         Estimated_PCSC_Dollars_Millions = Estimated_PCSC_Dollars,
         Estimated_PCSC_Nonfed_Match_Millions = Estimated_PCSC_Nonfed_Match) %>%
  # Sort by descending percentage PCSC 
  arrange(desc(Percentage_Funds_PCSC)) %>%
  distinct()

# Tribal frequency of project eligibility added manually, extracted from percentage_states

## Table 4: NASS Regions ----

# NASS regions derived from https://www.nass.usda.gov/Statistics_by_State/RFO/index.php

# Create region variable
Region <- c("Northeastern", "Eastern Mountain", "Southern", "Great Lakes",
            "Upper Midwest", "Heartland", "Delta", "Northern Plains",
            "Southern Plains", "Mountain", "Northwest", "Pacific", "Island Territories")

# Create matching state variable
States_Territories <- c("Pennsylvania, Delaware, Maryland, New Jersey, New York, 
                        Maine, Vermont, New Hampshire, Rhode Island, Massachusetts, 
                        & Connecticut",
                        "Kentucky, North Carolina, Tennessee, Virginia, & West Virginia",
                        "Georgia, Alabama, Florida, & South Carolina",
                        "Michigan, Indiana, & Ohio",
                        "Iowa, Minnesota, & Wisconsin",
                        "Missouri & Illinois",
                        "Arkansas, Louisianca, & Mississippi",
                        "Nebraska, Kansas, North Dakota, & South Dakota",
                        "Texas & Oklahoma",
                        "Colorado, Arizona, Montana, New Mexico, Utah, & Wyoming",
                        "Washington, Alaska, Idaho, & Oregon",
                        "California, Hawaii, & Nevada",
                        "Guam, Puerto Rico, American Samoa, Northern Mariana Islands, & U.S. Virgin Islands")

# Create dataframe integrating these two variables
NASS_Regions <- data.frame(Region = Region, State_Territories = States_Territories)

## Table 5: Historical Support for CSAF Practices ----

# Create new dataset with practice-specific information for all years on a national level
practices_filtered <- Practice_Political_Download %>%
  filter(obligation_fy != "Total", 
         certification_fy == "Total",
         geography_level == "National",
         practice_code != "Total",
         !program %in% c("WHIP","AMA", "AWEP")) # Exclude unnecessary programs

# Edit dataset to only include CSAF practices (derived from https://www.nrcs.usda.gov/sites/default/files/2023-10/NRCS-CSAF-Mitigation-Activities-List.pdf)
CSAF <- practices_filtered %>%
  group_by(obligation_fy) %>%
  mutate(total_dollars_ob_fy = sum(dollars_obligated, na.rm = TRUE)) %>% # Calculate total $ for each year
  ungroup() %>%
  filter(practice_code %in% c(327, "E327A", "E327B", 328, "E328A", "E328B",
                              "E328E", "E328F", "E328N", "E328O", 329, "E329A", 
                              "E329B", "E329C", "E329D", "E329E", 332, 336, 340,
                              "E340A", "E340B", "E340C", "E340D", "E340F", 
                              "E340G", "E340H", "E340I", "E340J", 345, "E345A",
                              "E345B", "E345C", "E345D", "E345E", 386, "E386A",
                              "E386B", "E386C", "E386D", "E386E", 393, "E393A",
                              412, "E412A", 484, "E484A", "E484B", "E484C", 
                              "E484D", 585, 601, 603, 590, "E590A", "E590B",
                              "E590C", "E590D", 317, 313, 366, 367, 592, 632,
                              314, "E314A", 315, "E315A", 338, "E338A", 512, 
                              "E512A", "E512B", "E512C", "E512D", "E512I",
                              "E512J", "E512L", "E512M", 528, "E528A", "E528F",
                              "E528G", "E528G", "E528H", "E528I", "E528J",
                              "E528L", "E528M", "E528N", "E528O", "E528P",
                              "E528R", "E528S", "E528T", "E528U", 550, "E550A",
                              "E550B", 311, 342, 379, 380, 381, "E381A", 383,
                              "E383A", 384, "E384A", 390, "E390A", "E390B", 391,
                              "E391A", "E391B", "E391C", 420, "E420A", "E420B",
                              422, 612, "E612B", "E612C", "E612G", 643, "E643D",
                              666, "E666A", "E66D", "E666E", "E666F", "E666H",
                              "E666I", "E666J", "E666K", "E666L", "E666P",
                              "E666R", "E666S", 453, 543, 372, "E372A", "E372B",
                              374, 430, 441, 442, 533, "E533C", "E533D", 672,
                              670, 657, 449, "E449B", "B000FST5", "B000CPL25")) %>%
  group_by(obligation_fy) %>% # Separate for percentages in different years
  mutate(CS_dollars_ob_fy = sum(dollars_obligated, na.rm = TRUE)) %>% # Find sum of funds supporting CSAF practices
  mutate(percent_CS = CS_dollars_ob_fy / total_dollars_ob_fy * 100) %>% # Find percentage of funds each year supporting CSAF practices
  ungroup()

# Create table summarizing yearly changes
CSAF_yrs <- CSAF %>%
  summarize(obligation_fy = unique(obligation_fy),
            total_dollars_ob_fy = unique(total_dollars_ob_fy),
            CS_dollars_ob_fy = unique(CS_dollars_ob_fy),
            percent_CS = unique(percent_CS))
CSAF_yrs$obligation_fy <- as.numeric(CSAF_yrs$obligation_fy)
CSAF_yrs <- CSAF_yrs %>%
  arrange(obligation_fy)

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Statistics ----
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

## Stat 1: CSAF Historical Share ----

# Source practices_filtered and CSAF dataframes

# Find sum of dollars obligated to all practices
total_dollars_for_practices <- sum(practices_filtered$dollars_obligated, na.rm = TRUE)

# Find sum of dollars obligated to CSAF practices
CSAF_dollars_sum <- sum(CSAF$dollars_obligated, na.rm = TRUE)

# Calculate percentage of funds which are CSAF-specific
percent_historically_cs <- CSAF_dollars_sum / total_dollars_for_practices * 100

percent_historically_cs

## Stat 2: Avg Value of Contracts per Program ----

# Create dataset focused on programs of interest
contract_values <- Contract_Political_Download %>%
  filter(historically_underserved == "Total", state == "Total", 
         county_name == "Total", !program %in% c("AWEP", "WHIP", "AMA"),
         obligation_fy == "Total", suppressed != "TRUE") %>%
  mutate(program = case_when(program %in% c("CSP", "CSP-GCI") ~ "CSP",
                             program %in% c("RCPP-EQIP", "RCPP-CSP") ~ "RCPP",
                             program == "EQIP" ~ "EQIP")) %>%
  arrange(state, program, obligation_fy, dollars_obligated) %>% 
  group_by(state, program, obligation_fy) %>%
  filter(dollars_obligated == max(dollars_obligated)) %>% # Take Total for contract status
  ungroup() %>%
  summarize(program = program,
    avg_contract_value = dollars_obligated / contract_count) # Divide dollars among contracts

View(contract_values)

## Stat 3: Top 10 practices' share of funds from historical programs, 2014-2023 ----

# Establish total dollar amount from Practice dataset
totals_practices <- Practice_Political_Download %>%
  # Filter for totals in relevant programs
  filter(geography_level == "National", practice_code == "Total", 
         obligation_fy == "Total", certification_fy == "Total",
         !program %in% c("WHIP", "AMA", "AWEP"))

# Sum total dollars obligated
total_dollars_for_practices <- sum(totals_practices$dollars_obligated)

# Filter for top 10 practices
total_dollars_top_10 <- Practice_Political_Download %>%
  filter(geography_level == "National", practice_code != "Total",
         obligation_fy == "Total", certification_fy == "Total",
         # Check only relevant programs
         !program %in% c("WHIP", "AMA", "AWEP"),
         # Remove Annual Payments and Minimum Payment Adjustments (not practice-specific)
         !practice_code %in% c("CROP", "AGLAND", "PCROP", "NIPF",
                               "PAST", "RANGE", "FARM", "MINPAY",
                               "E300EAP1", "E300EAP2")) %>%
  # Sum dollars obligated to practices across programs
  group_by(practice_code) %>%
  summarize(sum_dollars_to_practices = sum(dollars_obligated, na.rm = TRUE)) %>%
  ungroup() %>%
  # Take the top 10
  arrange(desc(sum_dollars_to_practices)) %>%
  slice(1:10)

# Sum dollars obligated to top 10 practices
top_10_practices_funds <- sum(total_dollars_top_10$sum_dollars_to_practices)

# Compare to total funds
top_10_share <- top_10_practices_funds / total_dollars_for_practices * 100
  
top_10_share

## Stat 4: Frequency of top 15 PCSC practices ----

# Source: frequency_practices

# Establish total counts of practices
total_practice_counts <- sum(frequency_practices$Count)

# Find frequency of top 15 practices
top_15_practices <- frequency_practices %>%
  slice(1:15)
  
top_15_practices_counts <- sum(top_15_practices$Count)

# Calculate percentage of practice counts which belong in top 15 practices
top_15_frequency_share <- top_15_practices_counts / total_practice_counts * 100

top_15_frequency_share

## Stat 5: PCSC avg and median percentage increases in funding ----

# Source: PCSC_Table

# Find percentage increase in funding from historical programs
PCSC_Table_with_increases_calculated <- PCSC_Table %>%
  mutate(Percent_increase_in_funding = Estimated_PCSC_Dollars_Millions
         / Sum_Older_Program_Dollars_Millions * 100)

# Calculate avg and median values for percentage increase
avg_increase <- mean(PCSC_Table_with_increases_calculated$Percent_increase_in_funding)
median_increase <- median(PCSC_Table_with_increases_calculated$Percent_increase_in_funding)

avg_increase
median_increase

## Stat 6: PCSC Monitoring by Org Type ----

# Load in data on partner type
# This dataset created manually, using publicly available PCSC agreements wherever possible (no source found detailing the collection available, agreements were individually searched)
# 5 Columns: Applicant, Actor Type, Agreement.found. (Y/N), Agreement.link, and Notes
PCSC_actors <- read.csv("/Users/annedb20/Downloads/PCSC_Partners1(in).csv")

# Merge with PCSC dataset and clean
PCSC_with_actors <- left_join(Partnerships_for_CS_Commodities_data, PCSC_actors, by = "Applicant")

PCSC_with_actors <- PCSC_with_actors %>%
  select(-Notes, - Agreement.found., -Agreement.link)

PCSC_with_actors$Actor.Type <- gsub("Firm ", "Firm", PCSC_with_actors$Actor.Type)

# Calculate frequency of different types of actors
freq_actors <- table(PCSC_with_actors$Actor.Type) 

freq_actors_df <- data.frame(freq_actors) %>%
  rename(Actor.Type = Var1)

# Create sets of phrases to search for
soil_sampling <- c("soil sampling", "soil sample", "Soil sampling", "Soil Sampling",
                   "soil and plan sampling", "soil quality assessment", "soil analysis",
                   "soil health analysis", "soil's physical properties", 
                   "soil health testing", "core sampling for carbon")
remote_sensing <- c("remote sens", "Remote sens", "remote-sens", "remotely sens",
                    "satellite", "Satellite", "drone", "Drone")
life_cycle_assessment <- c("LCA", "life cycle assessment", "Life Cycle Assessment",
                           "Life cycle assessment")
artificial_intelligence <- c("AI", "artificial intelligence", "Artifical Intelligence",
                             "machine learning", "Machine learning", "Machine Learning")
Fieldprint <- c("Fieldprint", "FieldPrint")
field_level <- c("In-field", "in-field", "field-level", "field level", "Field level",
                 "Field-level", "Field measurements", "field measurement", 
                 "field-scale", "field scale", "in field")

# Compile list of sets of phrases to search for
phrases_lists <- list(soil_sampling, remote_sensing, life_cycle_assessment, 
                      artificial_intelligence, Fieldprint, field_level)

# Create function to count occurrences of phrases
count_phrases <- function(PCSC_with_actors, phrases_lists) {
  for (i in seq_along(phrases_lists)) {
    phrases <- phrases_lists[[i]]
    column_name <- paste0("Phrase.Count.", i)
    PCSC_with_actors[[column_name]] <- sapply(PCSC_with_actors$`MMRV Highlights`, function(text) {
      as.integer(any(sapply(phrases, (function(phrase) str_count(text, fixed(phrase)))))) 
    })
  }
  return(PCSC_with_actors)
}

# Run function against data
PCSC_with_actors_counts <- count_phrases(PCSC_with_actors, phrases_lists)

# Create function to aggregate by actor type
aggregate_phrase_counts <- function(PCSC_with_actors_counts) {
  PCSC_with_actors_counts %>%
    group_by(Actor.Type) %>%
    summarize(across(starts_with("Phrase.Count"), sum, .names = "Total.{.col}"))
}

# Run function against data
aggregated_counts <- aggregate_phrase_counts(PCSC_with_actors_counts)

# Rename variables for easier viewing
aggregated_counts <- aggregated_counts %>%
  rename(Soil_sampling_counts = Total.Phrase.Count.1,
         Remote_sensing_counts = Total.Phrase.Count.2,
         LCA_counts = Total.Phrase.Count.3,
         AI_counts = Total.Phrase.Count.4,
         Fieldprint_counts = Total.Phrase.Count.5,
         field_level_counts = Total.Phrase.Count.6) 

# Add in actor type frequency to allow weighted values
weighted_counts <- merge(aggregated_counts, freq_actors_df, by = "Actor.Type")

# Find percentage of actors who plan to practice certain MMRV activities
weighted_counts <- weighted_counts %>%
  mutate(Soil_sampling_weighted = Soil_sampling_counts/Freq * 100,
         Remote_sensing_weighted = Remote_sensing_counts/Freq * 100,
         LCA_weighted = LCA_counts/Freq * 100,
         AI_weighted = AI_counts/Freq * 100,
         Fieldprint_weighted = Fieldprint_counts/Freq * 100,
         field_level_weighted = field_level_counts/Freq * 100)

View(weighted_counts)

## Stat 7: Avg number of states supported by different types of PCSC partners ----

# Source: PCSC_states_long, PCSC_actors

# Create dataset with PCSC actor type and individual rows for states
PCSC_states_long_with_actors <- merge(PCSC_states_long, PCSC_actors, by = "Applicant")

# Clean dataset
PCSC_states_long_with_actors <- PCSC_states_long_with_actors %>%
  select(-Notes, - Agreement.found., -Agreement.link)

PCSC_with_actors$Actor.Type <- gsub("Firm ", "Firm", PCSC_with_actors$Actor.Type)

# Find total numbers of states supported by each applicant
PCSC_states_count_by_applicant <- PCSC_states_long_with_actors %>%
  group_by(Applicant, Actor.Type) %>%
  summarize(Unique.States.Supported = n_distinct(State))

# Find total number of states supported by each actor type
PCSC_states_aggregated_by_actor <- PCSC_states_count_by_applicant %>%
  group_by(Actor.Type) %>%
  summarize(Total.Unique.States.Supported = sum(Unique.States.Supported))

# Add in actor type frequency for weighting
weighted_PCSC_states_by_actor <- merge(PCSC_states_aggregated_by_actor, 
                                       freq_actors_df, by = "Actor.Type")

# Find averages
weighted_PCSC_states_by_actor <- weighted_PCSC_states_by_actor %>%
  mutate(average_number_of_states_supported = Total.Unique.States.Supported / Freq)

View(weighted_PCSC_states_by_actor)

## Stat 8: HUP support across types of PCSC partners ----

# Load data
# This dataset is simply the PCSC dataset from USDA with one column manually added, based off the "Equity Highlights" column
# Additional column (binary values): "Primarily HUP", representing whether the project explicitly states that 50% or more of producers will be HUP or small, 
# AND/OR that 50% or more of its funds will support HUP or small producers
PCSC_HUP_data <- read_xlsx("/Users/annedb20/Downloads/Partnership_for_Climate-Smart_Commodities_Projects (1).xlsx", 
                          sheet = "Full Data")

Simplified_PCSC <- PCSC_HUP_data %>%
  select(-`Project Summary`, -`States Covered Under Agreement`, -`Short Agreement Description`,
         -`Major Commodities Under Agreement`, -`Available Practices`, -`MMRV Highlights`,
         -`Marketing Highlights`, -`Federal Funding`, -`Non-Federal Match`)
PCSC_HUP_and_actors <- left_join(Simplified_PCSC, PCSC_actors, by = "Applicant")
PCSC_HUP_by_actor <- PCSC_HUP_and_actors %>%
  filter(`Primarily HUP` == 1) %>%
  group_by(Actor.Type) %>%
  summarize(count_primarily_HUP = n())

# Add in actor frequencies for weighting
PCSC_HUP_by_actor_weighted <- merge(PCSC_HUP_by_actor, freq_actors_df, by = "Actor.Type")
PCSC_HUP_by_actor_weighted <- PCSC_HUP_by_actor_weighted %>%
  mutate(weighted_primarily_HUP = count_primarily_HUP / Freq * 100)

View(PCSC_HUP_by_actor_weighted)

## Stat 9: Historical funding by state, viewed with producer numbers ----

# Source: PCSC Table

# Filter data for relevant info
Hist_funding_by_state_with_producers <- PCSC_Table %>%
  select(State, Number_of_Producers, Sum_Older_Program_Dollars_Millions)

# Establish the sum of historical funds from this dataset
sum_historical_funds <- sum(
  Hist_funding_by_state_with_producers$Sum_Older_Program_Dollars_Millions)

# Calculate percentage of total historical funds which each state receives
Hist_funding_by_state_with_producers <- Hist_funding_by_state_with_producers %>%
  mutate(state_share_of_hist_funds = 
           Sum_Older_Program_Dollars_Millions / sum_historical_funds * 100) %>%
  arrange(desc(Number_of_Producers))

View(Hist_funding_by_state_with_producers)
